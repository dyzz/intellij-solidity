buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io'}
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "org.jetbrains.grammarkit" version "2021.2.2"
    // Avoid 1.5.3 due to issues with hot reloading, see https://github.com/JetBrains/gradle-intellij-plugin/issues/959
    id "org.jetbrains.intellij" version "1.5.2"
    id 'net.researchgate.release' version '2.8.1'
}


apply plugin: 'java'
apply plugin: 'org.jetbrains.grammarkit'
apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.intellij'
apply plugin: 'idea'
apply plugin: 'jacoco'

sourceCompatibility = 11
compileKotlin {
    kotlinOptions.jvmTarget = 11
}

idea {
    module {
        generatedSourceDirs += file('gen')
    }
}

sourceSets {
    main {
        java.srcDirs += 'gen'
    }
}

clean.doFirst {
    delete 'gen'
}

intellij {
    pluginName = 'Intellij-Solidity'

    version = '2022.1.1'
    downloadSources = true
    updateSinceUntilBuild = false
    // TODO(sergey): remove
    plugins = [
        'java',
    ]

    sandboxDir = project.rootDir.canonicalPath + "/.sandbox"
}

runIde {
    maxHeapSize = "1G"
}

repositories {
    mavenCentral()
    // ethereumj isn't available on maven central
    jcenter()
    maven { url "https://www.jetbrains.com/intellij-repository/releases" }
    maven { url "https://cache-redirector.jetbrains.com/intellij-dependencies" }
    // A set of repositories needed to run grammarKit with the latest version of IJ
    // see https://github.com/JetBrains/intellij-platform-plugin-template/issues/264
    maven { url "https://cache-redirector.jetbrains.com/download.jetbrains.com/teamcity-repository" }
    maven { url "https://cache-redirector.jetbrains.com/packages.jetbrains.team/maven/p/grazi/grazie-platform-public" }
    maven { url "https://cache-redirector.jetbrains.com/maven.pkg.jetbrains.space/public/p/ktor/eap" }
    maven { url "https://cache-redirector.jetbrains.com/download-pgp-verifier" }

}

configurations {
    generateLexer
    generateParser
    runtime.exclude group: "org.slf4j"  // IntelliJ uses slf4j which results in a class loader conflict
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.1"
    implementation "io.sentry:sentry:$sentry_version"

    // https://mvnrepository.com/artifact/org.ethereum/ethereumj-core
    compileOnly( group: 'org.ethereum', name: 'ethereumj-core', version: '1.7.0-RELEASE') {
        exclude group: 'org.ethereum', module: 'solcJ-all'
        exclude group: 'org.ethereum', module: 'rocksdbjni'
    }

    def web3jVersion = "4.0.1"
    implementation group: 'org.web3j', name: 'core', version: web3jVersion
    implementation group: 'org.web3j', name: 'codegen', version: web3jVersion
    implementation group: 'org.web3j', name: 'abi', version: web3jVersion

    testImplementation group: 'junit', name: 'junit', version: '4.11'
}

release {
    newVersionCommitMessage = '[Intellij-Solidity Release] - '
    preTagCommitMessage = '[Intellij-Solidity Release] - pre tag commit: '
    buildTasks = ['buildPlugin']
}


task codegen(dependsOn: ['generateLexer', 'generateParser']) {}
tasks.compileKotlin.dependsOn codegen

grammarKit {
    grammarKitRelease = "2021.1.2"
    //intellijRelease = "221.5591.52" // 2022.1.1
}

generateLexer {
    def lexerName = "_SolidityLexer"
    source = "$project.projectDir/src/main/grammars/${lexerName}.flex"
    targetDir = "gen/me/serce/solidity"
    targetClass = "$lexerName"
    skeleton = new File('src/main/grammars/idea-flex.skeleton')
    purgeOldFiles = true
}

generateParser {
    dependsOn generateLexer

    def pkg = 'me/serce/solidity'
    source = "$project.projectDir/src/main/grammars/solidity.bnf"
    targetRoot = 'gen'
    pathToParser = "$pkg/SolidityParser.java"
    pathToPsiRoot = "$pkg/psi"
    purgeOldFiles = true

    outputs.dir(new File("$targetRoot/$pkg"))
}


// codecov

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

check.dependsOn jacocoTestReport
